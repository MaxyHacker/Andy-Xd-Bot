"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const node_fetch_1 = require("node-fetch");
const constants_1 = require("./constants");
class Image {
    constructor(raw, name, doujin) {
        this.pageNumber = null;
        this.extension = Image.extensionConvert(raw.t);
        this.height = raw.h;
        this.width = raw.w;
        this.pageNumber = isNaN(name) ? null : Number(name);
        const baseURL = isNaN(name) ? constants_1.THUMBS_URL : constants_1.IMAGE_URL;
        this.url = `${baseURL}/galleries/${doujin.mediaId}/${name}.${this.extension}`;
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            return node_fetch_1.default(this.url).then(data => data.buffer());
        });
    }
    static extensionConvert(extension) {
        switch (extension) {
            case 'p':
                return 'png';
            case 'j':
                return 'jpg';
            case 'g':
                return 'gif';
            default:
                throw new Error(`Image extension "${extension}" is not a known format.`);
        }
    }
}
exports.Image = Image;
